// <auto-generated />
using System;
using MasterNet.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MasterNet.Persistence.Migrations
{
    [DbContext(typeof(MasterNetDbContext))]
    partial class MasterNetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("MasterNet.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "Master modern web development with ASP.NET Core, from basics to advanced concepts including MVC, Web API, and Entity Framework Core.",
                            PublicationDate = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Complete ASP.NET Core Web Development"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Deep dive into Entity Framework Core with advanced querying, performance optimization, and database design patterns.",
                            PublicationDate = new DateTime(2024, 2, 20, 14, 30, 0, 0, DateTimeKind.Utc),
                            Title = "Advanced Entity Framework Core"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Description = "Learn to implement Clean Architecture principles in .NET applications for maintainable and scalable software.",
                            PublicationDate = new DateTime(2024, 3, 10, 9, 15, 0, 0, DateTimeKind.Utc),
                            Title = "Clean Architecture with .NET"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Description = "Build scalable microservices using .NET, Docker, and modern cloud technologies with hands-on projects.",
                            PublicationDate = new DateTime(2024, 4, 5, 16, 45, 0, 0, DateTimeKind.Utc),
                            Title = "Microservices Architecture with .NET"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Description = "Master comprehensive testing strategies including unit testing, integration testing, and test-driven development.",
                            PublicationDate = new DateTime(2024, 5, 12, 11, 20, 0, 0, DateTimeKind.Utc),
                            Title = "Unit Testing and TDD in .NET"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Description = "Design and develop professional RESTful APIs with authentication, versioning, and comprehensive documentation.",
                            PublicationDate = new DateTime(2024, 6, 18, 13, 30, 0, 0, DateTimeKind.Utc),
                            Title = "RESTful Web APIs with ASP.NET Core"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Description = "Create interactive web applications using Blazor Server and WebAssembly with C# instead of JavaScript.",
                            PublicationDate = new DateTime(2024, 7, 25, 15, 45, 0, 0, DateTimeKind.Utc),
                            Title = "Blazor: Full-Stack Web Development"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Description = "Deploy and scale .NET applications in Microsoft Azure with cloud-native development practices.",
                            PublicationDate = new DateTime(2024, 8, 8, 12, 15, 0, 0, DateTimeKind.Utc),
                            Title = "Azure Cloud Development with .NET"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            Description = "Learn advanced techniques to optimize .NET application performance, memory management, and scalability.",
                            PublicationDate = new DateTime(2024, 9, 14, 10, 30, 0, 0, DateTimeKind.Utc),
                            Title = "Performance Optimization in .NET"
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.CourseInstructor", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_CourseInstructor_CourseId");

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("IX_CourseInstructor_InstructorId");

                    b.ToTable("course_instructors", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.CoursePrice", b =>
                {
                    b.Property<Guid>("PriceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("PriceId", "CourseId");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_CoursePrice_CourseId");

                    b.HasIndex("PriceId")
                        .HasDatabaseName("IX_CoursePrice_PriceId");

                    b.ToTable("course_prices", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Degree")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("instructors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Degree = "Master of Computer Science",
                            FirstName = "John",
                            LastName = "Anderson"
                        },
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-123456789012"),
                            Degree = "PhD in Software Engineering",
                            FirstName = "Sarah",
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = new Guid("23456789-2345-2345-2345-234567890123"),
                            Degree = "Bachelor of Computer Engineering",
                            FirstName = "Michael",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = new Guid("34567890-3456-3456-3456-345678901234"),
                            Degree = "Master of Information Technology",
                            FirstName = "Emily",
                            LastName = "Davis"
                        },
                        new
                        {
                            Id = new Guid("45678901-4567-4567-4567-456789012345"),
                            Degree = "Certified Solutions Architect",
                            FirstName = "Robert",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = new Guid("56789012-5678-5678-5678-567890123456"),
                            Degree = "Master of Business Administration",
                            FirstName = "Jennifer",
                            LastName = "Miller"
                        },
                        new
                        {
                            Id = new Guid("67890123-6789-6789-6789-678901234567"),
                            Degree = "PhD in Computer Science",
                            FirstName = "David",
                            LastName = "Wilson"
                        },
                        new
                        {
                            Id = new Guid("78901234-7890-7890-7890-789012345678"),
                            Degree = "Senior Software Developer",
                            FirstName = "Lisa",
                            LastName = "Garcia"
                        },
                        new
                        {
                            Id = new Guid("89012345-8901-8901-8901-890123456789"),
                            Degree = "Cloud Solutions Expert",
                            FirstName = "Christopher",
                            LastName = "Martinez"
                        },
                        new
                        {
                            Id = new Guid("90123456-9012-9012-9012-901234567890"),
                            Degree = "DevOps Engineering Specialist",
                            FirstName = "Amanda",
                            LastName = "Taylor"
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_Photos_CourseId");

                    b.ToTable("photos", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("PromotionalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CurrentPrice = 49.99m,
                            Name = "Basic Tier",
                            PromotionalPrice = 39.99m
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CurrentPrice = 99.99m,
                            Name = "Standard Tier",
                            PromotionalPrice = 79.99m
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CurrentPrice = 149.99m,
                            Name = "Premium Tier",
                            PromotionalPrice = 119.99m
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CurrentPrice = 29.99m,
                            Name = "Student Discount",
                            PromotionalPrice = 19.99m
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CurrentPrice = 299.99m,
                            Name = "Enterprise License",
                            PromotionalPrice = 249.99m
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER")
                        .HasComment("Score debe estar entre 1 y 5");

                    b.Property<string>("Student")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_Ratings_CourseId");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.CourseInstructor", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Domain.Instructor", "Instructor")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("MasterNet.Domain.CoursePrice", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("CoursePrices")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Domain.Price", "Price")
                        .WithMany("CoursePrices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("MasterNet.Domain.Photo", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("Photos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MasterNet.Domain.Rating", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("Ratings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MasterNet.Domain.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CoursePrices");

                    b.Navigation("Photos");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MasterNet.Domain.Instructor", b =>
                {
                    b.Navigation("CourseInstructors");
                });

            modelBuilder.Entity("MasterNet.Domain.Price", b =>
                {
                    b.Navigation("CoursePrices");
                });
#pragma warning restore 612, 618
        }
    }
}
